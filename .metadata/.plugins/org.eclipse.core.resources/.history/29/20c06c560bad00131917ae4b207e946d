package quickcheck

import common._

import org.scalacheck._
import Arbitrary._
import Gen._
import Prop._

abstract class QuickCheckHeap extends Properties("Heap") with IntHeap {

  property("min1") = forAll { a: Int =>
    val h = insert(a, empty)
    findMin(h) == a
  }
  
  property("min2") = forAll { (a: Int, b: Int) =>
    val h = insert(a, empty)
    val g = insert(b, h)
    
    val smallest = if(a < b) {a} else {b}
    
    findMin(g) == smallest
  }
  
  property("empty1") = forAll { a: Int =>
    val h = insert(a, empty)
    val g = deleteMin(h)
    
    isEmpty(g)
  }  

  lazy val genHeap: Gen[H] = ???

  implicit lazy val arbHeap: Arbitrary[H] = Arbitrary(genHeap)

}
